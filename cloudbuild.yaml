steps:
  # Step 1: Checkout the source code from your repository
  
  - name: 'gcr.io/cloud-builders/git'
    args: ['clone', '--single-branch', '--branch', 'main', 'https://github.com/jganthakoru/cloudbuild-demo.git']

  # Step 2: Build the Spring Boot application using Maven
  
  - name: 'maven:3.6.3-jdk-11'
    entrypoint: 'mvn'
    args: ['clean', 'install']
   
  # Step 3: Modify the Kubernetes YAML file to replace INIT_IMAGE_NAME with the actual image name
  
  - name: ubuntu
    args: ['bash', '-c', 'sed -i "s,INIT_IMAGE_NAME,gcr.io/$PROJECT_ID/sample-rest," kubernetes/app.yaml'] 

  # Step 4: Build a Docker image containing the Spring Boot application
  
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/${PROJECT_ID}/sample-rest', '.']

  # Step 5: Push the Docker image to Google Container Registry (GCR)
  
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/${PROJECT_ID}/sample-rest']

  # Step 6: (Optional) Perform additional deployment steps such as applying Kubernetes manifests, running migrations, etc.
  
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'kubernetes/app.yaml', '--validate=false']
    env:
       - 'CLOUDSDK_COMPUTE_ZONE=us-central1-c'
       - 'CLOUDSDK_CONTAINER_CLUSTER=app-services-cluster'

# Step 7: Image produced by the build
images: ['gcr.io/${PROJECT_ID}/sample-rest']
